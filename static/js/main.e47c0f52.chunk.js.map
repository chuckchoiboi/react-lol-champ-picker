{"version":3,"sources":["Champs/Champs.js","Filter/Filter.js","Stats/Stats.js","App.js","serviceWorker.js","index.js"],"names":["champs","props","src","images","alt","list","className","width","id","index","onMouseEnter","entered","onMouseLeave","left","filter","filterLabels","map","type","checkboxesState","checked","name","value","charAt","toUpperCase","slice","onChange","for","stats","ratings","i","difficultyNum","push","title","blurb","attack","defense","magic","difficulty","style","display","App","state","champData","champImages","isLoaded","champStats","checkboxes","all","assassin","fighter","mage","marksman","support","tank","mouseEnterHandler","event","target","setState","info","mouseLeaveHandler","replace","checkboxHandler","targetId","fetch","then","res","json","Object","keys","data","champ","length","image","full","this","champGallery","ch","tags","types","toLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e47c0f52.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Champs.css';\r\n\r\nconst champs = (props) => {\r\n  return (\r\n    <img\r\n      src={props.images}\r\n      alt={props.list}\r\n      className={'All ' + props.list}\r\n      width=\"60px\"\r\n      id={props.index}\r\n      onMouseEnter={props.entered}\r\n      onMouseLeave={props.left}\r\n    />\r\n  );\r\n};\r\n\r\nexport default champs;\r\n","import React from 'react';\r\nimport './Filter.css';\r\n\r\n// Filter Types\r\nconst filter = (props) => {\r\n  const types = [\r\n    'all',\r\n    'assassin',\r\n    'fighter',\r\n    'mage',\r\n    'marksman',\r\n    'support',\r\n    'tank',\r\n  ];\r\n\r\n  // const labels = [];\r\n  // for (let i = 0; i <= types.length; i++) {\r\n  //   if (props.checkboxesState[types[i]] === 'checked') {\r\n  //     console.log(props.checkboxesState[types[i]]);\r\n  //     labels.push(\r\n  //       <div className={types[i] + 'Checkbox'}>\r\n  //         <input\r\n  //           type=\"checkbox\"\r\n  //           id={types[i]}\r\n  //           name={types[i]}\r\n  //           value={types[i].charAt(0).toUpperCase() + types[i].slice(1)}\r\n  //           onChange={props.checked}\r\n  //         />\r\n  //         <label for={types[i]}>\r\n  //           {types[i].charAt(0).toUpperCase() + types[i].slice(1)}\r\n  //         </label>\r\n  //       </div>\r\n  //     );\r\n  //   } else if (props.checkboxesState[types[i]] === 'unchecked') {\r\n  //     labels.push(\r\n  //       <div className={types[i] + 'Checkbox'}>\r\n  //         <input\r\n  //           type=\"checkbox\"\r\n  //           id={types[i]}\r\n  //           name={types[i]}\r\n  //           value={types[i].charAt(0).toUpperCase() + types[i].slice(1)}\r\n  //           onChange={props.checked}\r\n  //         />\r\n  //         <label for={types[i]}>\r\n  //           {types[i].charAt(0).toUpperCase() + types[i].slice(1)}\r\n  //         </label>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  // }\r\n\r\n  // Filter Labels\r\n  const filterLabels = types.map((type) => {\r\n    if (props.checkboxesState[type] === 'checked') {\r\n      return (\r\n        <div className={type + 'Checkbox'}>\r\n          <input\r\n            checked={true}\r\n            type=\"checkbox\"\r\n            id={type}\r\n            name={type}\r\n            value={type.charAt(0).toUpperCase() + type.slice(1)}\r\n            onChange={props.checked}\r\n          />\r\n          <label for={type}>\r\n            {type.charAt(0).toUpperCase() + type.slice(1)}\r\n          </label>\r\n        </div>\r\n      );\r\n    } else if (props.checkboxesState[type] === 'unchecked') {\r\n      return (\r\n        <div className={type + 'Checkbox'}>\r\n          <input\r\n            checked={false}\r\n            type=\"checkbox\"\r\n            id={type}\r\n            name={type}\r\n            value={type.charAt(0).toUpperCase() + type.slice(1)}\r\n            onChange={props.checked}\r\n          />\r\n          <label for={type}>\r\n            {type.charAt(0).toUpperCase() + type.slice(1)}\r\n          </label>\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"sideBar\">\r\n      <span>What should we play today?</span>\r\n      <div id=\"champ-type\">{filterLabels}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default filter;\r\n","import React from 'react';\r\nimport './Stats.css';\r\n\r\nconst stats = (props) => {\r\n  const ratings = [];\r\n  for (let i = 10; i >= 1; i--) {\r\n    if (i !== props.difficultyNum) {\r\n      ratings.push(\r\n        <>\r\n          <input type=\"radio\" name=\"rating\" id={'rata' + i} />\r\n          <label for={'rata' + i}>{i}</label>\r\n        </>\r\n      );\r\n    } else if (i === props.difficultyNum) {\r\n      ratings.push(\r\n        <>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"rating\"\r\n            className=\"checked\"\r\n            id={'rata' + i}\r\n          />\r\n          <label for={'rata' + i}>{i}</label>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"champ-preview\">\r\n      <div id=\"champ-detail\">\r\n        <h2>{props.name}</h2>\r\n        <h3>{props.title}</h3>\r\n        <p>{props.blurb}</p>\r\n      </div>\r\n      <div id=\"champ-stats\">\r\n        <span id=\"attack\">{props.attack}</span>\r\n        <br />\r\n        <span id=\"defense\">{props.defense}</span>\r\n        <br />\r\n        <span id=\"magic\">{props.magic}</span>\r\n        <br />\r\n        <span id=\"difficulty\">{props.difficulty}</span>\r\n\r\n        {props.name ? (\r\n          <div className=\"rating\" style={{ display: 'flex' }}>\r\n            {ratings}\r\n          </div>\r\n        ) : (\r\n          <div className=\"rating\">{ratings}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default stats;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Champs from './Champs/Champs';\nimport Filter from './Filter/Filter';\nimport Stats from './Stats/Stats';\n\nclass App extends Component {\n  state = {\n    champData: [],\n    champImages: [],\n    isLoaded: false,\n    champStats: {\n      name: '',\n      title: '',\n      blurb: '',\n      attack: '',\n      defense: '',\n      magic: '',\n      difficulty: '',\n      difficultyNum: '',\n    },\n    checkboxes: {\n      all: 'checked',\n      assassin: 'unchecked',\n      fighter: 'unchecked',\n      mage: 'unchecked',\n      marksman: 'unchecked',\n      support: 'unchecked',\n      tank: 'unchecked',\n    },\n  };\n\n  componentDidMount() {\n    fetch(\n      'https://ddragon.leagueoflegends.com/cdn/10.2.1/data/en_US/champion.json'\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          isLoaded: true,\n          champData: Object.keys(json.data).map((champ) => {\n            return json.data[champ];\n          }),\n          champImages: Object.keys(json.data).map((champ) => {\n            for (let i = 0; i < json.data[champ].name.length; i++) {\n              return `http://ddragon.leagueoflegends.com/cdn/10.6.1/img/champion/${json.data[champ].image.full}`;\n            }\n          }),\n        });\n      });\n  }\n\n  mouseEnterHandler = (event) => {\n    event.target.className = event.target.className + ' hover';\n    let i = event.target.id;\n    this.setState({\n      champStats: {\n        name: this.state.champData[i].name,\n        title:\n          this.state.champData[i].title.charAt(0).toUpperCase() +\n          this.state.champData[i].title.slice(1),\n        blurb: this.state.champData[i].blurb,\n        attack: 'Attack: ' + this.state.champData[i].info.attack,\n        defense: 'Defense: ' + this.state.champData[i].info.defense,\n        magic: 'Magic: ' + this.state.champData[i].info.magic,\n        difficulty: 'Difficulty: ' + this.state.champData[i].info.difficulty,\n        difficultyNum: this.state.champData[i].info.difficulty,\n      },\n    });\n  };\n\n  mouseLeaveHandler = (event) => {\n    event.target.className = event.target.className.replace('hover', '');\n    this.setState({\n      champStats: {\n        name: '',\n        title: '',\n        blurb: '',\n        attack: '',\n        defense: '',\n        magic: '',\n        difficulty: '',\n      },\n    });\n  };\n\n  checkboxHandler = (event) => {\n    const targetId = event.target.id;\n    const checkboxes = this.state.checkboxes;\n\n    if (targetId === 'all' && checkboxes[targetId] === 'unchecked') {\n      checkboxes[targetId] = 'checked';\n      checkboxes.assassin = 'unchecked';\n      checkboxes.fighter = 'unchecked';\n      checkboxes.mage = 'unchecked';\n      checkboxes.marksman = 'unchecked';\n      checkboxes.support = 'unchecked';\n      checkboxes.tank = 'unchecked';\n    } else if (targetId !== 'all' && checkboxes.all === 'checked') {\n      checkboxes.all = 'unchecked';\n      checkboxes[targetId] = 'checked';\n    } else if (checkboxes[targetId] === 'checked') {\n      checkboxes[targetId] = 'unchecked';\n    } else if (checkboxes[targetId] === 'unchecked') {\n      checkboxes[targetId] = 'checked';\n    }\n    this.setState({\n      state: this.state,\n    });\n  };\n\n  render() {\n    var { isLoaded, champData, champImages, checkboxes } = this.state;\n\n    const champGallery = champData.map((ch, index) => {\n      for (let i = 0; i < ch.tags.length; i++) {\n        if (checkboxes.all === 'checked') {\n          return (\n            <Champs\n              data={ch}\n              list={ch.name}\n              images={champImages[index]}\n              types={ch.tags}\n              index={index}\n              entered={this.mouseEnterHandler}\n              left={this.mouseLeaveHandler}\n            />\n          );\n        } else if (checkboxes[ch.tags[i].toLowerCase()] === 'checked') {\n          return (\n            <Champs\n              data={ch}\n              list={ch.name}\n              images={champImages[index]}\n              types={ch.tags}\n              index={index}\n              entered={this.mouseEnterHandler}\n              left={this.mouseLeaveHandler}\n            />\n          );\n        }\n      }\n      // if(ch.tags){\n\n      // }\n\n      // return (\n      //   <Champs\n      //     data={ch}\n      //     list={ch.name}\n      //     images={champImages[index]}\n      //     types={ch.tags}\n      //     index={index}\n      //     entered={this.mouseEnterHandler}\n      //     left={this.mouseLeaveHandler}\n      //   />\n      // );\n    });\n\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"App\">\n          <h1>Pick your Champion!</h1>\n          <Filter\n            checked={this.checkboxHandler}\n            checkboxesState={this.state.checkboxes}\n          />\n          <div className=\"champ-gallery\">{champGallery}</div>\n          <Stats\n            name={this.state.champStats.name}\n            title={this.state.champStats.title}\n            blurb={this.state.champStats.blurb}\n            attack={this.state.champStats.attack}\n            defense={this.state.champStats.defense}\n            magic={this.state.champStats.magic}\n            difficulty={this.state.champStats.difficulty}\n            difficultyNum={this.state.champStats.difficultyNum}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}